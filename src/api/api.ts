/* tslint:disable */
/* eslint-disable */
/**
 * Treatment Program API
 * API for managing treatment programs and activities.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiCreateActivityPostRequest
 */
export interface ApiCreateActivityPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiCreateActivityPostRequest
     */
    'week'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiCreateActivityPostRequest
     */
    'weekday'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiCreateActivityPostRequest
     */
    'title'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiCreateActivityPostRequest
     */
    'completed'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiTreatmentProgramGet200ResponseValueInner
 */
export interface ApiTreatmentProgramGet200ResponseValueInner {
    /**
     * 
     * @type {string}
     * @memberof ApiTreatmentProgramGet200ResponseValueInner
     */
    'weekday'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiTreatmentProgramGet200ResponseValueInner
     */
    'title'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiTreatmentProgramGet200ResponseValueInner
     */
    'completed'?: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new activity
         * @param {ApiCreateActivityPostRequest} apiCreateActivityPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateActivityPost: async (apiCreateActivityPostRequest: ApiCreateActivityPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiCreateActivityPostRequest' is not null or undefined
            assertParamExists('apiCreateActivityPost', 'apiCreateActivityPostRequest', apiCreateActivityPostRequest)
            const localVarPath = `/api/create-activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiCreateActivityPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the treatment program data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTreatmentProgramGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/treatment-program`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CORS preflight request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTreatmentProgramOptions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/treatment-program`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new activity
         * @param {ApiCreateActivityPostRequest} apiCreateActivityPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCreateActivityPost(apiCreateActivityPostRequest: ApiCreateActivityPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCreateActivityPost(apiCreateActivityPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiCreateActivityPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the treatment program data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTreatmentProgramGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<ApiTreatmentProgramGet200ResponseValueInner>; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTreatmentProgramGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiTreatmentProgramGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary CORS preflight request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTreatmentProgramOptions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTreatmentProgramOptions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiTreatmentProgramOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new activity
         * @param {ApiCreateActivityPostRequest} apiCreateActivityPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateActivityPost(apiCreateActivityPostRequest: ApiCreateActivityPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCreateActivityPost(apiCreateActivityPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the treatment program data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTreatmentProgramGet(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: Array<ApiTreatmentProgramGet200ResponseValueInner>; }> {
            return localVarFp.apiTreatmentProgramGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CORS preflight request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTreatmentProgramOptions(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTreatmentProgramOptions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create a new activity
     * @param {ApiCreateActivityPostRequest} apiCreateActivityPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiCreateActivityPost(apiCreateActivityPostRequest: ApiCreateActivityPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiCreateActivityPost(apiCreateActivityPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the treatment program data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiTreatmentProgramGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiTreatmentProgramGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CORS preflight request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiTreatmentProgramOptions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiTreatmentProgramOptions(options).then((request) => request(this.axios, this.basePath));
    }
}



